schema {
  query: Query
  mutation: Mutation
}

type DeleteTaskPayload {
  deletedTaskId: Int!
}

type Mutation {
  createTask(input: CreateTaskInput!): TaskItem!
  deleteTask(input: DeleteTaskInput!): DeleteTaskPayload!
  updateTaskStatus(input: UpdateTaskInput!): TaskItem!
}

type Query {
  tasks(where: TaskItemFilterInput order: [TaskItemSortInput!]): [TaskItem!]!
}

type TaskItem {
  id: ID!
  title: String!
  isCompleted: Boolean!
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input CreateTaskInput {
  title: String!
}

input DeleteTaskInput {
  id: Int!
}

input IdOperationFilterInput {
  eq: ID
  neq: ID
  in: [ID]
  nin: [ID]
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input TaskItemFilterInput {
  and: [TaskItemFilterInput!]
  or: [TaskItemFilterInput!]
  id: IdOperationFilterInput
  title: StringOperationFilterInput
  isCompleted: BooleanOperationFilterInput
}

input TaskItemSortInput {
  id: SortEnumType
  title: SortEnumType
  isCompleted: SortEnumType
}

input UpdateTaskInput {
  id: Int!
  isCompleted: Boolean!
}

enum SortEnumType {
  ASC
  DESC
}

directive @tag(name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION